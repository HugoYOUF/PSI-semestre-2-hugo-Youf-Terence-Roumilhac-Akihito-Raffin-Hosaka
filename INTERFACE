using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Serialization;
using MySql.Data.MySqlClient;
using Newtonsoft.Json;

namespace LivInParisConsoleApp
{
    // Classes entité
    public class ClientParticulier
    {
        public int Id_Client { get; set; }
        public string Nom { get; set; }
        public string Prenom { get; set; }
        public string Rue { get; set; }
        public int NumPorte { get; set; }
        public int CodePostal { get; set; }
        public string Ville { get; set; }
        public string Telephone { get; set; }
        public string Email { get; set; }
        public string Metro { get; set; }
    }

    public class ClientEntreprise
    {
        public int Id_Client_entreprise { get; set; }
        public string Nom { get; set; }
        public string AdresseEntreprise { get; set; }
        public string Referent { get; set; }
    }

    public class Cuisinier
    {
        public int Id_Cuisinier { get; set; }
        public string Nom { get; set; }
        public string Prenom { get; set; }
        public string Rue { get; set; }
        public int NumPorte { get; set; }
        public int CodePostal { get; set; }
        public string Ville { get; set; }
        public string Telephone { get; set; }
        public string Email { get; set; }
        public string Metro { get; set; }
    }

    public class CommandeEntity
    {
        public int Id_Commande { get; set; }
        public int Id_Cuisinier { get; set; }
        public int Id_Client { get; set; }
        public string Composition { get; set; }
        public decimal Prix { get; set; }
        public int Quantite { get; set; }
        public string Plat { get; set; }
        public DateTime DateFab { get; set; }
        public DateTime DatePer { get; set; }
        public string Regime { get; set; }
        public string Nature { get; set; }
        public string Ing1 { get; set; }
        public string Vol1 { get; set; }
        public string Ing2 { get; set; }
        public string Vol2 { get; set; }
        public string Ing3 { get; set; }
        public string Vol3 { get; set; }
        public string Ing4 { get; set; }
        public string Vol4 { get; set; }
    }

    // Couche d'accès aux données
    public static class DataAccess
    {
        private const string ConnString = "SERVER=localhost;PORT=3306;DATABASE=asso;UID=root;PASSWORD=TDRoumi01112005?";

        public static IEnumerable<dynamic> Query(string sql, object parameters = null)
        {
            using var conn = new MySqlConnection(ConnString);
            conn.Open();
            using var cmd = new MySqlCommand(sql, conn);
            if (parameters != null)
                foreach (var prop in parameters.GetType().GetProperties())
                    cmd.Parameters.AddWithValue("@" + prop.Name, prop.GetValue(parameters));

            using var reader = cmd.ExecuteReader();
            var results = new List<dynamic>();
            while (reader.Read())
            {
                var expando = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                for (int i = 0; i < reader.FieldCount; i++)
                    expando.Add(reader.GetName(i), reader.GetValue(i));
                results.Add(expando);
            }
            return results;
        }

        public static int Execute(string sql, object parameters = null)
        {
            using var conn = new MySqlConnection(ConnString);
            conn.Open();
            using var cmd = new MySqlCommand(sql, conn);
            if (parameters != null)
                foreach (var prop in parameters.GetType().GetProperties())
                    cmd.Parameters.AddWithValue("@" + prop.Name, prop.GetValue(parameters));
            return cmd.ExecuteNonQuery();
        }
    }

    // Helper export JSON/XML
    public static class Exporter
    {
        public static void ToJson<T>(IEnumerable<T> list, string path)
        {
            var json = JsonConvert.SerializeObject(list, Newtonsoft.Json.Formatting.Indented);
            File.WriteAllText(path, json);
            Console.WriteLine($"Exporté en JSON : {path}");
        }

        public static void ToXml<T>(IEnumerable<T> list, string path)
        {
            var serializer = new XmlSerializer(typeof(List<T>));
            using var stream = new FileStream(path, FileMode.Create);
            serializer.Serialize(stream, new List<T>(list));
            Console.WriteLine($"Exporté en XML : {path}");
        }
    }

    class Program
    {
        static void Main()
        {
            while (true)
            {
                // Afficher le menu principal
                Console.Clear();
                Console.WriteLine("=== Menu Principal ===");
                Console.WriteLine("1. Module Clients");
                Console.WriteLine("2. Module Cuisiniers");
                Console.WriteLine("3. Module Commandes");
                Console.WriteLine("4. Module Statistiques");
                Console.WriteLine("5. Exporter JSON/XML");
                Console.WriteLine("0. Quitter");
                Console.Write("Choix : ");
                var choix = Console.ReadLine();

                switch (choix)
                {
                    case "1": ClientsMenu(); break;
                    case "2": CuisiniersMenu(); break;
                    case "3": CommandesMenu(); break;
                    case "4": StatsMenu(); break;
                    case "5": ExportMenu(); break;
                    case "0": return;
                    default:
                        Console.WriteLine("Choix invalide. Essayez à nouveau.");
                        break;
                }
            }
        }

        // Menu Clients
        static void ClientsMenu()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("=== Module Clients ===");
                Console.WriteLine("1. Lister alphabétique");
                Console.WriteLine("2. Lister par rue");
                Console.WriteLine("3. Total achats par client");
                Console.WriteLine("4. Ajouter client");
                Console.WriteLine("0. Retour");
                Console.Write("Choix : ");
                var option = Console.ReadLine();

                switch (option)
                {
                    case "1":
                        RenderTable(DataAccess.Query("SELECT * FROM Client_particulier ORDER BY nom, prenom"));
                        break;
                    case "2":
                        RenderTable(DataAccess.Query("SELECT * FROM Client_particulier ORDER BY rue, numPorte"));
                        break;
                    case "3":
                        RenderTable(DataAccess.Query(
                            "SELECT cp.nom, cp.prenom, SUM(c.prix*c.quantite) AS TotalAchats FROM Client_particulier cp JOIN Commande c ON cp.Id_Client=c.Id_Client GROUP BY cp.Id_Client"));
                        break;
                    case "4":
                        AddClientMenu();
                        break;
                    case "0":
                        return;
                    default:
                        Console.WriteLine("Choix invalide.");
                        break;
                }
            }
        }

        // Ajouter un client
        static void AddClientMenu()
        {
            Console.Clear();
            Console.WriteLine("=== Ajouter un Client ===");
            Console.WriteLine("1. Client Particulier");
            Console.WriteLine("2. Client Entreprise");
            Console.WriteLine("0. Retour");
            Console.Write("Choix : ");
            var type = Console.ReadLine();

            switch (type)
            {
                case "1":
                    AddClientParticulier();
                    break;
                case "2":
                    AddClientEntreprise();
                    break;
                case "0":
                    return;
                default:
                    Console.WriteLine("Choix invalide.");
                    break;
            }
        }

        static void AddClientParticulier()
        {
            Console.Write("Nom : ");
            var nom = Console.ReadLine();
            Console.Write("Prénom : ");
            var prenom = Console.ReadLine();
            Console.Write("Rue : ");
            var rue = Console.ReadLine();
            Console.Write("N° de porte : ");
            var num = int.Parse(Console.ReadLine());
            Console.Write("Code postal : ");
            var cp = int.Parse(Console.ReadLine());
            Console.Write("Ville : ");
            var ville = Console.ReadLine();
            Console.Write("Téléphone : ");
            var tel = Console.ReadLine();
            Console.Write("E-mail : ");
            var email = Console.ReadLine();
            Console.Write("Station métro : ");
            var metro = Console.ReadLine();

            DataAccess.Execute(
                "INSERT INTO Client_particulier (nom, prenom, rue, numPorte, codePostal, ville, telephone, email, metro) VALUES (@nom,@prenom,@rue,@num,@cp,@ville,@tel,@email,@metro)",
                new { nom, prenom, rue, num, cp, ville, tel, email, metro });
            Console.WriteLine("Client particulier ajouté");
        }

        static void AddClientEntreprise()
        {
            Console.Write("Nom entreprise : ");
            var nomE = Console.ReadLine();
            Console.Write("Adresse : ");
            var addr = Console.ReadLine();
            Console.Write("Référent : ");
            var referent = Console.ReadLine();

            DataAccess.Execute(
                "INSERT INTO Client_entreprise (nom, adresse_entreprise, referent) VALUES (@nomE,@addr,@referent)",
                new { nomE, addr, referent });
            Console.WriteLine("Client entreprise ajouté");
        }

        // Menu Cuisiniers
        static void CuisiniersMenu()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("=== Module Cuisiniers ===");
                Console.WriteLine("1. Clients desservis");
                Console.WriteLine("2. Plats par fréquence");
                Console.WriteLine("3. Ajouter cuisinier");
                Console.WriteLine("0. Retour");
                Console.Write("Choix : ");
                var option = Console.ReadLine();

                switch (option)
                {
                    case "1":
                        Console.Write("Id Cuisinier : ");
                        var id = int.Parse(Console.ReadLine());
                        RenderTable(DataAccess.Query(
                            "SELECT DISTINCT cp.* FROM Client_particulier cp JOIN Commande c ON cp.Id_Client=c.Id_Client WHERE c.Id_Cuisinier=@id", new { id }));
                        break;
                    case "2":
                        RenderTable(DataAccess.Query(
                            "SELECT plat, COUNT(*) AS Frequence FROM Commande GROUP BY plat ORDER BY Frequence DESC"));
                        break;
                    case "3":
                        AddCuisinier();
                        break;
                    case "0":
                        return;
                    default:
                        Console.WriteLine("Choix invalide.");
                        break;
                }
            }
        }

        static void AddCuisinier()
        {
            Console.Write("Nom : ");
            var nom = Console.ReadLine();
            Console.Write("Prénom : ");
            var prenom = Console.ReadLine();
            Console.Write("Rue : ");
            var rue = Console.ReadLine();
            Console.Write("N° de porte : ");
            var num = int.Parse(Console.ReadLine());
            Console.Write("Code postal : ");
            var cp = int.Parse(Console.ReadLine());
            Console.Write("Ville : ");
            var ville = Console.ReadLine();
            Console.Write("Téléphone : ");
            var tel = Console.ReadLine();
            Console.Write("E-mail : ");
            var email = Console.ReadLine();
            Console.Write("Station métro : ");
            var metro = Console.ReadLine();

            DataAccess.Execute(
                "INSERT INTO Cuisinier (nom_, prenom, rue, numPorte, codePostal, ville, telephone, email, metro) VALUES (@nom,@prenom,@rue,@num,@cp,@ville,@tel,@email,@metro)",
                new { nom, prenom, rue, num, cp, ville, tel, email, metro });
            Console.WriteLine("Cuisinier ajouté");
        }

        // Menu Commandes
        static void CommandesMenu()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("=== Module Commandes ===");
                Console.WriteLine("1. Créer commande");
                Console.WriteLine("2. Afficher toutes les commandes");
                Console.WriteLine("3. Calculer prix");
                Console.WriteLine("0. Retour");
                Console.Write("Choix : ");
                var option = Console.ReadLine();

                switch (option)
                {
                    case "1":
                        AddCommande();
                        break;
                    case "2":
                        RenderTable(DataAccess.Query("SELECT * FROM Commande"));
                        break;
                    case "3":
                        var idCalc = int.Parse(Console.ReadLine());
                        var result = DataAccess.Query("SELECT prix*quantite AS Total FROM Commande WHERE Id_Commande=@id", new { id = idCalc });
                        Console.WriteLine($"Total : {result.First().Total}");
                        break;
                    case "0":
                        return;
                    default:
                        Console.WriteLine("Choix invalide.");
                        break;
                }
            }
        }

        // Ajouter une commande
        static void AddCommande()
        {
            Console.Write("ID Cuisinier : ");
            var cui = int.Parse(Console.ReadLine());
            Console.Write("ID Client : ");
            var cli = int.Parse(Console.ReadLine());
            Console.Write("Composition : ");
            var comp = Console.ReadLine();
            Console.Write("Prix : ");
            var prix = decimal.Parse(Console.ReadLine());
            Console.Write("Quantité : ");
            var qty = int.Parse(Console.ReadLine());
            Console.Write("Plat : ");
            var plat = Console.ReadLine();
            Console.Write("Date de fabrication : ");
            var df = DateTime.Parse(Console.ReadLine());
            Console.Write("Date de péremption : ");
            var dp = DateTime.Parse(Console.ReadLine());
            Console.Write("Régime : ");
            var reg = Console.ReadLine();
            Console.Write("Nature : ");
            var nat = Console.ReadLine();

            DataAccess.Execute(
                "INSERT INTO Commande (Id_Cuisinier, Id_Client, composition, prix, quantite, plat, dateFab, datePer, regime, nature) VALUES (@cui,@cli,@comp,@prix,@qty,@plat,@df,@dp,@reg,@nat)",
                new { cui, cli, comp, prix, qty, plat, df, dp, reg, nat });
            Console.WriteLine("Commande créée");
        }

        // Menu Statistiques
        static void StatsMenu()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("=== Module Statistiques ===");
                Console.WriteLine("1. Livraisons par cuisinier");
                Console.WriteLine("2. Commandes par période");
                Console.WriteLine("3. Prix moyen des commandes");
                Console.WriteLine("4. Liste des cuisiniers");
                Console.WriteLine("0. Retour");
                Console.Write("Choix : ");
                var option = Console.ReadLine();

                switch (option)
                {
                    case "1":
                        RenderTable(DataAccess.Query("SELECT Id_Cuisinier, COUNT(*) AS Livraisons FROM Commande GROUP BY Id_Cuisinier"));
                        break;
                    case "2":
                        Console.Write("Date de début (aaaa-MM-jj) : ");
                        var sd = DateTime.Parse(Console.ReadLine());
                        Console.Write("Date de fin (aaaa-MM-jj) : ");
                        var ed = DateTime.Parse(Console.ReadLine());
                        RenderTable(DataAccess.Query("SELECT * FROM Commande WHERE dateFab BETWEEN @sd AND @ed", new { sd, ed }));
                        break;
                    case "3":
                        var avg = DataAccess.Query("SELECT AVG(prix*quantite) AS Moyenne FROM Commande");
                        Console.WriteLine($"Prix moyen des commandes : {avg.First().Moyenne:F2}");
                        break;
                    case "4":
                        RenderTable(DataAccess.Query("SELECT * FROM Cuisinier"));
                        break;
                    case "0":
                        return;
                    default:
                        Console.WriteLine("Choix invalide.");
                        break;
                }
            }
        }

        // Menu Export
        static void ExportMenu()
        {
            Console.Clear();
            Console.WriteLine("=== Exporter JSON/XML ===");
            Console.WriteLine("1. Exporter Clients");
            Console.WriteLine("2. Exporter Cuisiniers");
            Console.WriteLine("0. Retour");
            Console.Write("Choix : ");
            var option = Console.ReadLine();

            switch (option)
            {
                case "1":
                    var clients = DataAccess.Query("SELECT * FROM Client_particulier");
                    Exporter.ToJson(clients, "clients.json");
                    Exporter.ToXml(clients, "clients.xml");
                    break;
                case "2":
                    var cuis = DataAccess.Query("SELECT * FROM Cuisinier");
                    Exporter.ToJson(cuis, "cuisiniers.json");
                    Exporter.ToXml(cuis, "cuisiniers.xml");
                    break;
                case "0":
                    return;
                default:
                    Console.WriteLine("Choix invalide.");
                    break;
            }
        }

        // Affichage générique de table
        static void RenderTable(IEnumerable<dynamic> data)
        {
            if (!data.Any())
            {
                Console.WriteLine("Aucune donnée.");
                return;
            }
            foreach (var row in data)
            {
                foreach (var col in (IDictionary<string, object>)row)
                {
                    Console.Write($"{col.Key}: {col.Value}  ");
                }
                Console.WriteLine();
            }

            Console.WriteLine("\nAppuyez sur une touche pour revenir...");
            Console.ReadKey();
        }
    }
}

